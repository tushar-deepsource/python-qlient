{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Overview A fast and modern graphql client designed with simplicity in mind. Quick introduction Quick Start from qlient import Client client = Client ( \"https://api.spacex.land/graphql/\" ) res = client . query . launchesPast ( # spacex graphql input fields find = { \"mission_name\" : \"Starlink\" }, limit = 5 , sort = \"mission_name\" , # qlient specific _fields = [ \"mission_name\" , \"launch_success\" , \"launch_year\" ] ) which sends the following query query launchesPast($find: LaunchFind, $limit: Int, $sort: String) { launchesPast(find: $find, limit: $limit, sort: $sort) { mission_name launch_success launch_year } } to the server and return this body: { \"data\" : { \"launchesPast\" : [ { \"mission_name\" : \"Paz / Starlink Demo\" , \"launch_success\" : true , \"launch_year\" : \"2018\" }, { \"mission_name\" : \"Starlink 1\" , \"launch_success\" : true , \"launch_year\" : \"2019\" }, { \"mission_name\" : \"Starlink 2\" , \"launch_success\" : true , \"launch_year\" : \"2020\" }, { \"mission_name\" : \"Starlink 3\" , \"launch_success\" : true , \"launch_year\" : \"2020\" }, { \"mission_name\" : \"Starlink 4\" , \"launch_success\" : true , \"launch_year\" : \"2020\" } ] } }","title":"Overview"},{"location":"#overview","text":"A fast and modern graphql client designed with simplicity in mind.","title":"Overview"},{"location":"#quick-introduction","text":"","title":"Quick introduction"},{"location":"#quick-start","text":"from qlient import Client client = Client ( \"https://api.spacex.land/graphql/\" ) res = client . query . launchesPast ( # spacex graphql input fields find = { \"mission_name\" : \"Starlink\" }, limit = 5 , sort = \"mission_name\" , # qlient specific _fields = [ \"mission_name\" , \"launch_success\" , \"launch_year\" ] ) which sends the following query query launchesPast($find: LaunchFind, $limit: Int, $sort: String) { launchesPast(find: $find, limit: $limit, sort: $sort) { mission_name launch_success launch_year } } to the server and return this body: { \"data\" : { \"launchesPast\" : [ { \"mission_name\" : \"Paz / Starlink Demo\" , \"launch_success\" : true , \"launch_year\" : \"2018\" }, { \"mission_name\" : \"Starlink 1\" , \"launch_success\" : true , \"launch_year\" : \"2019\" }, { \"mission_name\" : \"Starlink 2\" , \"launch_success\" : true , \"launch_year\" : \"2020\" }, { \"mission_name\" : \"Starlink 3\" , \"launch_success\" : true , \"launch_year\" : \"2020\" }, { \"mission_name\" : \"Starlink 4\" , \"launch_success\" : true , \"launch_year\" : \"2020\" } ] } }","title":"Quick Start"},{"location":"install/","text":"Installation This package is build with poetry so installation is as you might expect. Using pip pip install qlient Using poetry poetry add qlient","title":"Installation"},{"location":"install/#installation","text":"This package is build with poetry so installation is as you might expect. Using pip pip install qlient Using poetry poetry add qlient","title":"Installation"},{"location":"usage/cache/","text":"Cache","title":"Cache"},{"location":"usage/cache/#cache","text":"","title":"Cache"},{"location":"usage/client/","text":"Client The Client is the main interface for interacting with the graphql server. It provides the query , mutation and subscription attribute which references the different types of operations (via ServiceProxy class). Configuring a default client The client takes one required argument (the endpoint ) and several optional arguments which all have an impact on the client behaviour. from qlient import Client endpoint = \"https://...\" # endpoint to your graphql api my_client = Client ( endpoint ) Initiating a client like so will make a request to the graphql server to inspect the schema. For more details on that, have a look at the schema documentation . Making a request Let's say we already have our default client setup. Now how do we make requests? Below is an example for the free spacex graphql api. from qlient import Client client = Client ( \"https://api.spacex.land/graphql/\" ) result = client . query . launchesPast ( limit = 3 , _fields = [ \"mission_id\" , \"mission_name\" ] ) { \"data\" : { \"launchesPast\" : [ { \"mission_id\" : [], \"mission_name\" : \"Starlink-15 (v1.0)\" }, { \"mission_id\" : [], \"mission_name\" : \"Sentinel-6 Michael Freilich\" }, { \"mission_id\" : [ \"EE86F74\" ], \"mission_name\" : \"Crew-1\" } ] } } Selecting nested fields You can use the Fields class to make powerful selections. Say for the example above, you'd also like to have information about the rocket. from qlient import Fields nested_fields = Fields ( \"mission_id\" , \"mission_name\" , rocket = Fields ( fairings = \"ship\" ) ) result = client . query . launchesPast ( limit = 3 , _fields = nested_fields ) For more details on the Fields class, have a look at the fields documentation","title":"Client"},{"location":"usage/client/#client","text":"The Client is the main interface for interacting with the graphql server. It provides the query , mutation and subscription attribute which references the different types of operations (via ServiceProxy class).","title":"Client"},{"location":"usage/client/#configuring-a-default-client","text":"The client takes one required argument (the endpoint ) and several optional arguments which all have an impact on the client behaviour. from qlient import Client endpoint = \"https://...\" # endpoint to your graphql api my_client = Client ( endpoint ) Initiating a client like so will make a request to the graphql server to inspect the schema. For more details on that, have a look at the schema documentation .","title":"Configuring a default client"},{"location":"usage/client/#making-a-request","text":"Let's say we already have our default client setup. Now how do we make requests? Below is an example for the free spacex graphql api. from qlient import Client client = Client ( \"https://api.spacex.land/graphql/\" ) result = client . query . launchesPast ( limit = 3 , _fields = [ \"mission_id\" , \"mission_name\" ] ) { \"data\" : { \"launchesPast\" : [ { \"mission_id\" : [], \"mission_name\" : \"Starlink-15 (v1.0)\" }, { \"mission_id\" : [], \"mission_name\" : \"Sentinel-6 Michael Freilich\" }, { \"mission_id\" : [ \"EE86F74\" ], \"mission_name\" : \"Crew-1\" } ] } }","title":"Making a request"},{"location":"usage/client/#selecting-nested-fields","text":"You can use the Fields class to make powerful selections. Say for the example above, you'd also like to have information about the rocket. from qlient import Fields nested_fields = Fields ( \"mission_id\" , \"mission_name\" , rocket = Fields ( fairings = \"ship\" ) ) result = client . query . launchesPast ( limit = 3 , _fields = nested_fields ) For more details on the Fields class, have a look at the fields documentation","title":"Selecting nested fields"},{"location":"usage/fields/","text":"Fields The Fields class is a powerful class for making nested or pre-configured field selections. Nested Fields selection from qlient import Fields nested_fields = Fields ( \"first_name\" , \"last_name\" , hobby = \"name\" ) print ( nested_fields ) last_name first_name hobby { name } The hobby selection can be changed from a single item to a list : from qlient import Fields nested_fields = Fields ( \"first_name\" , \"last_name\" , hobby = [ \"name\" , \"description\" ] ) print ( nested_fields ) last_name first_name hobby { name description } or even another Fields instance for even deeper selection. from qlient import Fields nested_fields = Fields ( \"first_name\" , \"last_name\" , hobby = Fields ( \"name\" , club = \"name\" ) ) print ( nested_fields ) last_name first_name hobby { name club { name } } Supported Operators The Fields class supports multiple operators. Addition from qlient import Fields name = Fields ( \"first_name\" , \"last_name\" ) age = Fields ( \"age\" ) added = name + age print ( added ) first_name last_name age Subtraction from qlient import Fields full_name = Fields ( \"first_name\" , \"last_name\" ) last_name = Fields ( \"last_name\" ) subtracted = full_name - last_name print ( subtracted ) first_name","title":"Fields"},{"location":"usage/fields/#fields","text":"The Fields class is a powerful class for making nested or pre-configured field selections.","title":"Fields"},{"location":"usage/fields/#nested-fields-selection","text":"from qlient import Fields nested_fields = Fields ( \"first_name\" , \"last_name\" , hobby = \"name\" ) print ( nested_fields ) last_name first_name hobby { name } The hobby selection can be changed from a single item to a list : from qlient import Fields nested_fields = Fields ( \"first_name\" , \"last_name\" , hobby = [ \"name\" , \"description\" ] ) print ( nested_fields ) last_name first_name hobby { name description } or even another Fields instance for even deeper selection. from qlient import Fields nested_fields = Fields ( \"first_name\" , \"last_name\" , hobby = Fields ( \"name\" , club = \"name\" ) ) print ( nested_fields ) last_name first_name hobby { name club { name } }","title":"Nested Fields selection"},{"location":"usage/fields/#supported-operators","text":"The Fields class supports multiple operators.","title":"Supported Operators"},{"location":"usage/fields/#addition","text":"from qlient import Fields name = Fields ( \"first_name\" , \"last_name\" ) age = Fields ( \"age\" ) added = name + age print ( added ) first_name last_name age","title":"Addition"},{"location":"usage/fields/#subtraction","text":"from qlient import Fields full_name = Fields ( \"first_name\" , \"last_name\" ) last_name = Fields ( \"last_name\" ) subtracted = full_name - last_name print ( subtracted ) first_name","title":"Subtraction"},{"location":"usage/proxy/","text":"Proxy Proxying is a really important part of this library and i am not talking about server proxies. It enables us to create callable instance that execute a given query. Service Proxy For each operation there is a specific service proxy. the client.query is of type QueryService and the client.mutation is of type MutationService . if you want to find out which bindings a service supports, you can use the supported_bindings property. client = ... print ( client . query . supported_bindings ) # [\"launchesPast\", \"landpads\", \"...\"] Operation An operation represents either a query, mutation or subscription on the server. Query This operation makes requests to the graphql server to get data. Let's have a look at the spacex graphql. This graphql api has a query to get the recent launches: launchesPast . You can make requests to this query like so: from qlient import Client client = Client ( \"https://api.spacex.land/graphql/\" ) response = client . query . launchesPast ( limit = 2 , _fields = [ \"mission_name\" , \"mission_id\" ] ) Mutation This operation makes requests to the graphql server to change data. (The example below is fictional and not working.) from qlient import Client client = Client ( \"https://...\" ) response = client . mutation . createUser ( first_name = \"John\" , last_name = \"Doe\" ) Subscription Not yet supported","title":"Proxy"},{"location":"usage/proxy/#proxy","text":"Proxying is a really important part of this library and i am not talking about server proxies. It enables us to create callable instance that execute a given query.","title":"Proxy"},{"location":"usage/proxy/#service-proxy","text":"For each operation there is a specific service proxy. the client.query is of type QueryService and the client.mutation is of type MutationService . if you want to find out which bindings a service supports, you can use the supported_bindings property. client = ... print ( client . query . supported_bindings ) # [\"launchesPast\", \"landpads\", \"...\"]","title":"Service Proxy"},{"location":"usage/proxy/#operation","text":"An operation represents either a query, mutation or subscription on the server.","title":"Operation"},{"location":"usage/proxy/#query","text":"This operation makes requests to the graphql server to get data. Let's have a look at the spacex graphql. This graphql api has a query to get the recent launches: launchesPast . You can make requests to this query like so: from qlient import Client client = Client ( \"https://api.spacex.land/graphql/\" ) response = client . query . launchesPast ( limit = 2 , _fields = [ \"mission_name\" , \"mission_id\" ] )","title":"Query"},{"location":"usage/proxy/#mutation","text":"This operation makes requests to the graphql server to change data. (The example below is fictional and not working.) from qlient import Client client = Client ( \"https://...\" ) response = client . mutation . createUser ( first_name = \"John\" , last_name = \"Doe\" )","title":"Mutation"},{"location":"usage/proxy/#subscription","text":"Not yet supported","title":"Subscription"},{"location":"usage/schema/","text":"Schema The schema describes what operations can be made, which inputs can be given and which return values are expected. Custom Schema In some cases, for example when the introspection has been disabled on the graphql api, you'd want to manually create the schema. This can be for example from a local file or a custom endpoint. Schema from local path Below shows an example that reads the schema from a local path on the file system. from pathlib import Path from qlient import Client , Schema path_to_schema = Path ( \"./path/to/my/schema.json\" ) local_schema = Schema ( location = path_to_schema ) client = Client ( endpoint = \"https://...\" , schema = local_schema ) Schema from custom remote Maybe you got a replica of the graphql api that allows for introspection. In that case can get the schema from the replica like so: from qlient import Client , Schema remote_schema = Schema ( location = \"https://my-schema-provider.com\" ) client = Client ( endpoint = \"https://my-graphql-api.com\" , schema = remote_schema ) My schema is neither on my filesystem, nor on any remote Do not fear, solution is near. have a look at the documentation for schema providers","title":"Schema"},{"location":"usage/schema/#schema","text":"The schema describes what operations can be made, which inputs can be given and which return values are expected.","title":"Schema"},{"location":"usage/schema/#custom-schema","text":"In some cases, for example when the introspection has been disabled on the graphql api, you'd want to manually create the schema. This can be for example from a local file or a custom endpoint.","title":"Custom Schema"},{"location":"usage/schema/#schema-from-local-path","text":"Below shows an example that reads the schema from a local path on the file system. from pathlib import Path from qlient import Client , Schema path_to_schema = Path ( \"./path/to/my/schema.json\" ) local_schema = Schema ( location = path_to_schema ) client = Client ( endpoint = \"https://...\" , schema = local_schema )","title":"Schema from local path"},{"location":"usage/schema/#schema-from-custom-remote","text":"Maybe you got a replica of the graphql api that allows for introspection. In that case can get the schema from the replica like so: from qlient import Client , Schema remote_schema = Schema ( location = \"https://my-schema-provider.com\" ) client = Client ( endpoint = \"https://my-graphql-api.com\" , schema = remote_schema )","title":"Schema from custom remote"},{"location":"usage/schema/#my-schema-is-neither-on-my-filesystem-nor-on-any-remote","text":"Do not fear, solution is near. have a look at the documentation for schema providers","title":"My schema is neither on my filesystem, nor on any remote"},{"location":"usage/schema_providers/","text":"Schema Providers What if my schema is neither located on my filesystem, nor is it on any remote? Do not fear, solution is near. Under the hood, the schema uses SchemaProviders . This package comes with two built in providers: The LocalSchemaProvider in case your schema is on your disk The RemoteSchemaProvider in case your schema can be obtained from the remote ( Remote Introspection only works when allowed by the graphql server. ) If neither of these two built in providers suit your needs, you can create your own schema provider like so: from typing import Dict from qlient import Client , Schema from qlient.schema.providers import SchemaProvider class MySchemaProvider ( SchemaProvider ): def load_schema ( self ) -> Dict : # do some logic that loads your schema return { ... } my_schema = Schema ( provider = MySchemaProvider ()) client = Client ( endpoint = \"https://...\" , schema = my_schema )","title":"Schema Providers"},{"location":"usage/schema_providers/#schema-providers","text":"What if my schema is neither located on my filesystem, nor is it on any remote? Do not fear, solution is near. Under the hood, the schema uses SchemaProviders . This package comes with two built in providers: The LocalSchemaProvider in case your schema is on your disk The RemoteSchemaProvider in case your schema can be obtained from the remote ( Remote Introspection only works when allowed by the graphql server. ) If neither of these two built in providers suit your needs, you can create your own schema provider like so: from typing import Dict from qlient import Client , Schema from qlient.schema.providers import SchemaProvider class MySchemaProvider ( SchemaProvider ): def load_schema ( self ) -> Dict : # do some logic that loads your schema return { ... } my_schema = Schema ( provider = MySchemaProvider ()) client = Client ( endpoint = \"https://...\" , schema = my_schema )","title":"Schema Providers"},{"location":"usage/settings/","text":"Settings","title":"Settings"},{"location":"usage/settings/#settings","text":"","title":"Settings"},{"location":"usage/transport/","text":"Transport The transport is responsible for communicating with your graphql api. He is the one sending and receiving your queries. We have decided to use requests.Session under the hood. This makes it simple to integrate into your existing projects and allow for session based authentication. Basic Authentication Below is an example that shows how to use a pre-configured requests.Session with basic authentication for requests. from requests import Session from qlient import Client , Transport my_session = Session () my_session . auth = ( \"my-user\" , \"my-password\" ) my_transport = Transport ( session = my_session ) client = Client ( endpoint = \"https://...\" , transport = my_transport )","title":"Transport"},{"location":"usage/transport/#transport","text":"The transport is responsible for communicating with your graphql api. He is the one sending and receiving your queries. We have decided to use requests.Session under the hood. This makes it simple to integrate into your existing projects and allow for session based authentication.","title":"Transport"},{"location":"usage/transport/#basic-authentication","text":"Below is an example that shows how to use a pre-configured requests.Session with basic authentication for requests. from requests import Session from qlient import Client , Transport my_session = Session () my_session . auth = ( \"my-user\" , \"my-password\" ) my_transport = Transport ( session = my_session ) client = Client ( endpoint = \"https://...\" , transport = my_transport )","title":"Basic Authentication"}]}